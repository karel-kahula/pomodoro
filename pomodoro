#!/bin/bash
set -e

PIDFile=/tmp/pomodoro.pid
doStartPomo=false
doWindPomo=false
interval=1500
pomoFile=/tmp/pomodoro
scriptName=$(basename $0)
winderTicks=12

cleanUp() {
    if [ -e $pomoFile ]; then
        rm $pomoFile
    fi
}

endPomo() {
    osascript -e 'display notification "ding" with title "🍅" sound name "default"'
    cleanUp
}

initPomo() {
    startTime=$(date '+%H:%M')
    if date -v -1d > /dev/null 2>&1; then #BSD date
        endTime=$(date -v +${interval}S '+%H:%M')
    else # Linux date
        endTime=$(date --date="+${interval} seconds" '+%H:%M')
    fi
    (sleep $interval; endPomo)&
    echo $! > $PIDFile
    echo "$startTime -> $endTime" > $pomoFile
}

stopPomo() {
    if [ -e $PIDFile ]; then
        pomoPID=$(cat $PIDFile)
        checkPID=$(pgrep -f "$scriptName")
        if (echo "$checkPID" | fgrep --silent --word-regexp "$pomoPID"); then
            kill -TERM $pomoPID
        fi
        rm $PIDFile
    fi
    cleanUp
}

reportPomo() {
    if [ -e $pomoFile ]; then
        cat $pomoFile
    fi
}

windPomo() {
    inputCount=0
    prompt="Wind-up the timer: "
    while IFS= read -p "$prompt" -r -s -n 1 char; do
        inputCount=$(expr $inputCount + 1)

        if [ $inputCount -gt $winderTicks ] || [ $inputCount -eq $winderTicks ]; then
            break
        fi

        prompt="*"
    done
    echo
}

printUsage() {
    echo "Usage: $scriptName [help|start|status|stop|wind]"
    exit 1
}

printHelp() {
    echo "$scriptName - It's a 25 minute kitchen timer"
    echo
    echo "$scriptName [options] [command]"
    echo
    echo "commands:"
    echo "h, -h, --help         Show this help message"
    echo "b, begin, start       Start the Pomodoro timer"
    echo "e, end, stop          Stop the Pomodoro timer"
    echo "w, wind               Start the Pomodoro by winding it up (mash some keys)"
    echo "s, status             Show current Pomodor session start and end times"
    echo
    echo "options:"
    echo "t, time, -t, --time   Set the Pomodoro timer in minutes"
}

startPomo() {
    stopPomo
    initPomo
    reportPomo
}

while test $# -gt 0; do
    case "$1" in
    h|help|-h|--help)
        printHelp
        exit 0
    ;;
    b|begin|start)
        doStartPomo=true
        shift
    ;;
    s|status)
        reportPomo
        exit 0
    ;;
    e|end|stop)
        stopPomo
        exit 0
    ;;
    w|wind)
        doWindPomo=true
        doStartPomo=true
        shift
    ;;
    t|time|-t|--time)
        shift
        numberRe='^[0-9]+$'
        if test $1 && [[ $1 =~  $numberRe ]]; then
            interval=$(expr $1 \* 60)
        else
            printUsage
            exit 1
        fi
        shift
    ;;
    *)
        break
    ;;
    esac
done

if [ "$doWindPomo" = true ]; then
    windPomo
fi

if [ "$doStartPomo" = true ]; then
    startPomo
    exit 0
fi

printUsage
exit 1
